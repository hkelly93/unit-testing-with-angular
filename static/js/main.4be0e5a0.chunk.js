(this.webpackJsonpslidedeck=this.webpackJsonpslidedeck||[]).push([[0],{2:function(e,t,i){e.exports={"slide-deck":"theme_slide-deck__30IhV","progress-bar":"theme_progress-bar__1o0no","title-slide":"theme_title-slide___cgBD","title-slide-secondary":"theme_title-slide-secondary__45-qQ","title-slide-tertiary":"theme_title-slide-tertiary__1v3wl",fadeIn:"theme_fadeIn__2i99R",slide:"theme_slide__qvjHA",column:"theme_column__1YpiC",subtext:"theme_subtext__3t1ra","with-bullet":"theme_with-bullet__1OtWi",inline:"theme_inline__5lyD8",animate:"theme_animate__2U69e",navigation:"theme_navigation__22ewX","left-arrow":"theme_left-arrow__1PQ8X","right-arrow":"theme_right-arrow__3ovVQ",bold:"theme_bold__sAbIh",subtitle:"theme_subtitle__1R7X0",notes:"theme_notes___SI1y","has-notes":"theme_has-notes__F6YLQ"}},254:function(e,t,i){"use strict";i.r(t);var s=i(1),n=i(18),c=i.n(n),o=i(9),a=i(5),r=i(260),l=i(0),h=[],d=function(e){return"/".concat(0===e?"":e)},u=function(e){return h.length?h:h=e.map((function(e,t){var i=d(t);return Object(l.jsx)(r.a,{path:i,component:function(){return e},exact:!0},i)}))},j=i(6),b=[32,13,39,40],m=[37,38],p=Object(s.createContext)({}),x=p.Provider,O=p.Consumer,g=function(e){var t=e.progress;return Object(l.jsx)(O,{children:function(e){return Object(l.jsx)("div",{style:{width:"".concat(t,"%")},className:e["progress-bar"]})}})},y=function(e){var t=e.forwards,i=e.backwards;return Object(l.jsx)(O,{children:function(e){return Object(l.jsxs)("div",{className:e.navigation,children:[Object(l.jsx)("button",{onClick:i,className:e["left-arrow"],children:"<"}),Object(l.jsx)("button",{onClick:t,className:e["right-arrow"],children:">"})]})}})},f=Object(a.a)(),v=function(e){var t=e.title,i=e.theme,n=e.slides,c=e.showNavigation,a=f.location.pathname.replace("/","")||0,h=Object(s.useState)(Number(a)),p=Object(o.a)(h,2),O=p[0],v=p[1],w=function(){return v(O+1)},k=function(){return v(O-1)};!function(e){Object(s.useEffect)((function(){document.title=e}),[e])}(t),function(e,t){Object(s.useEffect)((function(){e.push(d(t))}),[e,t])}(f,O),function(e,t){Object(j.a)("keydown",(function(i){var s=i.keyCode;b.includes(s)&&e(),m.includes(s)&&t()}))}(w,k),function(e){Object(j.a)("onclick",(function(t){console.log("click"),e()}))}(w);var S,_,T=O/n.length*100;return Object(l.jsx)("div",{className:i["slide-deck"],children:Object(l.jsxs)(x,{value:i,children:[c&&Object(l.jsx)(y,{forwards:w,backwards:k}),(S=f,_=n,Object(l.jsx)(r.b,{history:S,children:Object(l.jsx)(r.c,{children:u(_)})})),Object(l.jsx)(g,{progress:T})]})})},w=i(2),k=i.n(w),S=i(259),_=i(258),T=function(e){var t=e.title,i=e.subtitle,s=e.children,n=e.secondary,c=e.tertiary;return Object(l.jsx)(O,{children:function(e){var o=e["title-slide"];return n&&(o=e["title-slide-secondary"]),c&&(o=e["title-slide-tertiary"]),Object(l.jsxs)("div",{className:o,children:[s,Object(l.jsx)("h1",{children:t}),i&&Object(l.jsx)("h2",{children:i})]})}})},C=i(21),I=i(22),N=i.n(I),A=!1,E=function(e){var t=e.title,i=e.subtext,n=e.children,c=e.footer,a=e.animate,r=void 0===a||a,h=e.notes,d=void 0===h?"":h,u=Object(s.useState)(!1),b=Object(o.a)(u,2),m=b[0],p=b[1];Object(j.a)("keydown",(function(e){var t=78===e.keyCode;d&&p(!m||!t),t&&(A=!0)}));var x=function(e){return Object(l.jsxs)("div",{className:e["has-notes"],children:["\ud83d\udce3 ",!A&&Object(l.jsx)("span",{children:"Press n for notes"})]})};return Object(l.jsx)(O,{children:function(e){return Object(l.jsxs)("div",{className:N()(e.slide,Object(C.a)({},e.animate,r)),children:[t&&Object(l.jsx)("h1",{children:t}),i&&Object(l.jsx)("div",{className:e.subtext,children:i}),n,c||null,m&&Object(l.jsx)("div",{className:e.notes,children:d}),d&&x(e)]})}})},q="Unit Testing with Angular";var P=function(){var e=[Object(l.jsx)(T,{title:q,subtitle:"Harrison Kelly"}),Object(l.jsx)(T,{title:"what are they?",secondary:!0,children:Object(l.jsx)("img",{src:"https://media.giphy.com/media/V4uGHRgz0zi6Y/source.gif",alt:"",style:{height:"500px",paddingTop:"50px"}})}),Object(l.jsx)(E,{title:"Power \ud83d\udd28",subtext:"Use them to be able to",notes:"Unit tests enable developers to prevent regressions by having simple to write and quick to run test cases to make sure that their code is running properly. This allows for code to safely be refactored without having to worry that someone else is using the same code and you now broke their application (assuming that code has good unit testing). It is also a way to document how a function should work and what the expected outputs are.",children:Object(l.jsxs)("ul",{children:[Object(l.jsx)("li",{className:k.a["with-bullet"],children:"Prevent regressions during refactoring"}),Object(l.jsx)("li",{className:k.a["with-bullet"],children:"Additional form of finishing a feature"}),Object(l.jsx)("li",{className:k.a["with-bullet"],children:"Document code"})]})}),Object(l.jsx)(T,{secondary:!0,title:"What should be tested \ud83e\udd28"}),Object(l.jsx)(E,{title:"EVERYTHING",children:Object(l.jsx)("img",{style:{height:"500px"},src:"https://media.giphy.com/media/1FR40e3b76Jnq/giphy.gif?cid=ecf05e47d4abi9ebzluxutk4urjd734wkdd9aqsmeai3mivz&rid=giphy.gif&ct=g"})}),Object(l.jsx)(E,{title:"Joking..."}),Object(l.jsx)(E,{title:"Sort of...",children:Object(l.jsx)("p",{children:"Unit tests should cover everything that is testable. Think of it as a way to write rules your code has to follow."})}),Object(l.jsx)(E,{title:"\u26a0 Scope!",children:Object(l.jsx)("img",{src:"https://media.giphy.com/media/2tKbtEbIEsT6NpvoUw/giphy.gif"})}),Object(l.jsxs)(E,{animate:!1,title:"\u26a0 Scope!",children:[Object(l.jsxs)("p",{children:["Unit tests should ",Object(l.jsx)("strong",{children:"ONLY"}),' test one "unit". Unit tests for a component shouldn\'t make sure that a service is making the correct API call(s).']}),Object(l.jsx)("p",{children:"You need to test that the service is called, but not what the service's method is doing."})]}),Object(l.jsx)(E,{title:"But no one likes unit testing...",children:Object(l.jsx)("img",{style:{height:"400px"},src:"https://media.giphy.com/media/Js1qlQiDvj9ubktynP/giphy.gif"})}),Object(l.jsx)(E,{title:"I know",notes:"Unit tests give developers a quick way to know if their changes broke something. With good coverage, you can safely know that your changes did not break other areas of the app. There are some holes though and they shouldn't be used without actual browser/QA testing.",children:Object(l.jsx)("p",{children:"But if we want to have a stable code base and not be up late at night fixing critical bugs \ud83d\ude34..."})}),Object(l.jsx)(T,{tertiary:!0,title:"You have to write them"}),Object(l.jsx)(T,{tertiary:!0,title:"Okay...but how do I write one? \ud83e\udd14"}),Object(l.jsx)(T,{secondary:!0,title:"Where to test"}),Object(l.jsx)(E,{notes:"Testing the implementation directly leads to tests that break because code behind the scenes changed. This is a bad practice, especially when the code didn't change how the component functions.",children:Object(l.jsx)("p",{children:"You want to test your code at the point furthest from the implementation."})}),Object(l.jsxs)(E,{animate:!1,children:[Object(l.jsx)("p",{children:"You want to test your code at the point furthest from the implementation."}),Object(l.jsx)("p",{style:{textAlign:"left"},children:"This is usually through the template/view layer."})]}),Object(l.jsxs)(E,{animate:!1,children:[Object(l.jsx)("p",{children:"You want to test your code at the point furthest from the implementation."}),Object(l.jsx)("p",{children:"This is usually through the template/view layer."}),Object(l.jsx)("p",{children:"This layer is the least connected to the implementation and won't break if the component changes (usually \ud83d\ude00)."})]}),Object(l.jsx)(T,{tertiary:!0,title:"Example",children:Object(l.jsx)("img",{style:{height:"300px"},src:"https://media.giphy.com/media/g7SFZQGzS4HwQ/giphy.gif?cid=ecf05e476vafhdtttonfp41b7n3txl35cxh4hdn2i7ucje0w&rid=giphy.gif&ct=g"})}),Object(l.jsx)(E,{children:Object(l.jsx)("p",{children:"Let's say you have a component that finds all of the advisors for a specific household."})}),Object(l.jsxs)(E,{animate:!1,notes:"This is a classic example where the name of the household and the advisors are retrieved from API calls, formatted, and displayed in the front end.",children:[Object(l.jsx)("p",{children:"Let's say you have a component that finds all of the advisors for a specific household."}),Object(l.jsxs)("div",{style:{backgroundColor:"#eee",padding:"10px",border:"1px solid #ddd"},children:[Object(l.jsxs)("div",{style:{fontSize:"14pt"},children:["Advisors in Household ",Object(l.jsx)("strong",{children:"PEEKE HOUSE"})]}),Object(l.jsxs)("ul",{children:[Object(l.jsx)("li",{className:k.a["with-bullet"],children:"Laura Peeke"}),Object(l.jsx)("li",{className:k.a["with-bullet"],children:"Joe Peeke"}),Object(l.jsx)("li",{className:k.a["with-bullet"],children:"Sam Peeke Jr."})]})]})]}),Object(l.jsx)(E,{children:Object(l.jsx)("p",{children:"This would require the following unit tests"})}),Object(l.jsxs)(E,{animate:!1,notes:"Testing this would require tests to be written that make sure that the correct household and advisors are displayed.",children:[Object(l.jsx)("p",{children:"This would require the following unit tests"}),Object(l.jsxs)("div",{style:{width:"75%",fontSize:"20pt",textAlign:"center",color:"#666"},children:[Object(l.jsx)("pre",{children:"Should display the correct household name"}),Object(l.jsx)("pre",{children:"Should display the correct advisors in the household"})]})]}),Object(l.jsxs)(E,{title:"These tests would look like",children:[Object(l.jsx)(S.a,{language:"typescript",theme:_.a,customStyle:{fontSize:"1.35rem"},children:"it('should display the correct household name', () => {\n  fixture.detectChanges(); // Call ngOnInit.\n  const householdName = fixture.nativeElement.querySelector('#household-name');\n  expect(householdName.textContent()).toEqual('PEEKE HOUSE');\n}"}),Object(l.jsx)(S.a,{language:"typescript",theme:_.a,customStyle:{fontSize:"1.35rem"},children:"it('should display the correct advisors', () => {\n  fixture.detectChanges(); // Call ngOnInit.\n  const advisorsList = fixture.nativeElement.querySelector('#advisors-list');\n  expect(advisorsList.textContent())\n    .toEqual('Laura Peeke Joe Peeke Sam Peeke Jr.');\n}"})]}),Object(l.jsx)(E,{title:"\u270b WAIT",children:Object(l.jsx)("p",{children:"It's important to note that we aren't looking at properties in the component."})}),Object(l.jsxs)(E,{title:"\u270b WAIT",animate:!1,children:[Object(l.jsx)("p",{children:"It's important to note that we aren't looking at properties in the component."}),Object(l.jsx)("p",{children:"You could rewrite these tests to tie them to the implementation..."})]}),Object(l.jsxs)(E,{title:"\ud83d\ude45\u200d\u2642\ufe0f BAD TESTS",children:[Object(l.jsx)(S.a,{language:"typescript",theme:_.a,customStyle:{fontSize:"1.35rem"},children:"it('should display the correct household name', () => {\n    fixture.detectChanges(); // Call ngOnInit.\n    const { householdName } = component;\n    expect(householdName).toEqual('peeke household');\n  }"}),Object(l.jsx)(S.a,{language:"typescript",theme:_.a,customStyle:{fontSize:"1.35rem"},children:"it('should display the correct advisors', () => {\n    fixture.detectChanges(); // Call ngOnInit.\n    const { advisorsList } = component;\n    expect(advisorsList).toEqual([\n      'Laura Peeke',\n      'Joe Peeke',\n      'Sam Peeke Jr.');\n  }"})]}),Object(l.jsx)(E,{title:"\ud83d\ude14",children:Object(l.jsx)("p",{children:"These are bad tests for multiple reasons"})}),Object(l.jsxs)(E,{title:"\ud83d\ude14",animate:!1,children:[Object(l.jsx)("p",{children:"These are bad tests for multiple reasons"}),Object(l.jsx)("p",{children:"If the component changes how it retrieves/stores the data, the tests could need to be rewritten."})]}),Object(l.jsx)(T,{secondary:!0,title:"The Basics",children:Object(l.jsx)("img",{src:"https://media.giphy.com/media/de4QmZqpcqQMOPL2Mt/giphy.gif",alt:"Building Blocks"})}),Object(l.jsxs)(E,{title:"detect Changes",notes:"Calling fixture.detectChanges() is how you initialize your component for the first time. It is considered an anti-pattern to call 'component.ngOnInit', since Angular itself is responsible for calling that. If you need to call ngOnInit explicitly, you should look into how your test is structured and think about setup before the fixture detectChanges call. Make sure to call detectChanges every time you need the view to be updated.",children:[Object(l.jsx)("p",{className:k.a.subtitle,children:"Use it as a way to update your view."}),Object(l.jsxs)("div",{style:{textAlign:"center"},children:[Object(l.jsxs)("div",{children:["\u26d4 Do ",Object(l.jsx)("strong",{children:"NOT"})," call"," ",Object(l.jsx)("pre",{className:"code",style:{display:"inline-block"},children:"ngOnInit()"})," ","directly for this."]}),Object(l.jsx)("div",{children:"\u2705 Do call it before checking the view for changes"})]})]}),Object(l.jsx)(E,{title:"Example",children:Object(l.jsx)(S.a,{language:"typescript",theme:_.a,customStyle:{fontSize:"1.35rem"},children:"it('should show the button', () => {\n  fixture.detectChanges(); // Call ngOnInit.\n  component.shouldShowButton = true;\n\n  fixture.detectChanges(); // Update the view.\n  const button = fixture.nativeElement.querySelector('#my-button');\n  expect(button).toBeTruthy(); // Assert the button is in the DOM.\n})"})}),Object(l.jsxs)(E,{animate:!1,title:"Example",children:[Object(l.jsx)(S.a,{language:"typescript",theme:_.a,customStyle:{fontSize:"1.35rem"},children:"it('should show the button', () => {\n  fixture.detectChanges(); // Call ngOnInit.\n  component.shouldShowButton = true;\n\n  fixture.detectChanges(); // Update the view.\n  const button = fixture.nativeElement.querySelector('#my-button');\n  expect(button).toBeTruthy(); // Assert the button is in the DOM.\n})"}),Object(l.jsxs)("p",{children:["Updating the component's"," ",Object(l.jsx)("pre",{className:"code",style:{display:"inline-block"},children:"shouldShowButton"})," ","property updates the view."]})]}),Object(l.jsx)(E,{title:"Querying...\ud83d\udd0d",notes:"Querying allows you to interact with the DOM/template and check against what the user would see if they were running the app. This is extremely powerful because it enables you to interact with elements on the page, just as a user would, without the need to write end to end tests.",children:Object(l.jsx)("p",{children:"Use querying as a way to interact with the template and retreive data."})}),Object(l.jsxs)(E,{animate:!1,title:"Querying...\ud83d\udd0d",notes:"",children:[Object(l.jsx)("p",{children:"Use querying as a way to interact with the template and retreive data."}),Object(l.jsx)("p",{children:"You can think of this as document.querySelector and document.querySelectorAll."})]}),Object(l.jsx)(E,{title:"Querying...\ud83d\udd0d",notes:"",children:Object(l.jsx)("p",{children:"This is exposed on the fixture in the test under fixture.nativeElement."})}),Object(l.jsxs)(E,{animate:!1,title:"Querying...\ud83d\udd0d",notes:"",children:[Object(l.jsx)("p",{children:"This is exposed on the fixture in the test under fixture.nativeElement."}),Object(l.jsx)("p",{children:"It can be called with fixture.nativeElement.querySelector and fixture.nativeElement.querySelectorAll."})]}),Object(l.jsx)(E,{title:"Clicking",notes:"",children:Object(l.jsx)("p",{children:"You can use the return value of a query to click and interact with the DOM."})}),Object(l.jsxs)(E,{animate:!1,title:"Clicking",notes:"",children:[Object(l.jsx)("p",{children:"You can use the return value of a query to click and interact with the DOM."}),Object(l.jsx)(S.a,{language:"typescript",theme:_.a,customStyle:{fontSize:"1.35rem"},children:"const button = fixture.nativeElement.querySelector('#my-button');\nbutton.click();"})]}),Object(l.jsx)(E,{title:"Services...\ud83c\udf7d",notes:""}),Object(l.jsx)(E,{title:"Getting data",children:Object(l.jsx)("p",{children:"Most data is retrieved through a service, with Subscriptions."})}),Object(l.jsxs)(E,{animate:!1,title:"Getting data",children:[Object(l.jsx)("p",{children:"Most data is retrieved through a service, with Subscriptions."}),Object(l.jsx)(S.a,{language:"typescript",theme:_.a,customStyle:{fontSize:"1.35rem"},children:"this.subscriptions.push(\n  this.advisorService.getAdvisors().subscribe(advisors => {\n    this.advisors = advisors;\n  });\n);"})]}),Object(l.jsx)(T,{secondary:!0,title:"How to test that? \ud83e\udd14"}),Object(l.jsx)(E,{title:"Using spies!"}),Object(l.jsx)(E,{animate:!1,title:"Using spies!",children:Object(l.jsx)("p",{children:"Spies allow you to mock the data that the service is going to return...let's look at an example..."})}),Object(l.jsx)(E,{animate:!1,title:"Using Spies!",children:Object(l.jsx)(S.a,{language:"typescript",theme:_.a,customStyle:{fontSize:"1.35rem"},children:"it('should show the count of advisors correctly', () => {\n  // Grab the service from the test bed.\n  const advisorService = TestBed.inject(AdvisorService);\n\n  // Spy on the getAdvisors method to return an Observable with \"fakeAdvisors\".\n  spyOn(advisorService, 'getAdvisors').and.returnValue(of(fakeAdvisors));\n\n  // Call ngOnInit.\n  fixture.detectChanges();\n\n  const advisorCount = fixture.nativeElement.querySelector('#advisor-count')\n  expect(advisorCount.textContent).toEqual(3);\n})"})}),Object(l.jsx)(E,{animate:!1,title:"Using Spies!",subtext:"in your tests allows you to..",children:Object(l.jsxs)("ul",{children:[Object(l.jsx)("li",{className:k.a["with-bullet"],children:"Mock data"}),Object(l.jsx)("li",{className:k.a["with-bullet"],children:"Create test scenarios"}),Object(l.jsx)("li",{className:k.a["with-bullet"],children:"Test methods are called"}),Object(l.jsx)("li",{className:k.a["with-bullet"],children:"Limit testing to the scope of the suite"})]})}),Object(l.jsx)(E,{title:"More Spies...\ud83d\udd75\ufe0f\u200d\u2640\ufe0f",notes:""}),Object(l.jsx)(E,{animate:!1,title:"More Spies...\ud83d\udd75\ufe0f\u200d\u2640\ufe0f",notes:"",children:Object(l.jsx)("p",{children:"Spies allow you to setup the component with whatever data you want."})}),Object(l.jsxs)(E,{animate:!1,title:"More Spies...\ud83d\udd75\ufe0f\u200d\u2640\ufe0f",notes:"",children:[Object(l.jsx)("p",{children:"Spies allow you to setup the component with whatever data you want."}),Object(l.jsx)("p",{children:"This can be API data, Inputs, or even data entered into a form."})]}),Object(l.jsx)(E,{tertiary:!0,title:"Lets look at more examples"}),Object(l.jsx)(E,{title:"Outputs",children:Object(l.jsx)("p",{children:"Let's say you want to see if an Output emitted the correct value."})}),Object(l.jsxs)(E,{animate:!1,title:"Outputs",children:[Object(l.jsx)("p",{children:"Let's say you want to see if an Output emitted the correct value."}),Object(l.jsx)("p",{children:"You could do that with the following test..."})]}),Object(l.jsx)(E,{animate:!1,title:"Outputs",children:Object(l.jsx)(S.a,{language:"typescript",theme:_.a,customStyle:{fontSize:"1.35rem"},children:"it('should emit the change to the parent component', () => {\n  // Create the spy.\n  const spy = spyOn(component.onAdvisorChanged, 'emit');\n\n  // Get the checkbox.\n  const advisorId = '112233';\n  const checkboxId = '#advisor-checkbox-' + advisorId;\n  const advisorCheckbox = fixture.nativeElement.querySelector(checkboxId);\n\n  // Click the checkbox.\n  advisorCheckbox.click();\n\n  // Assert.\n  expect(spy).toHaveBeenCalledWith(advisorId);\n})"})}),Object(l.jsxs)(E,{title:"\u26a0 Notice!",children:[Object(l.jsxs)("p",{children:['Here we spied on the "emit" method ',Object(l.jsx)("strong",{children:"inside"})," of the Output, not the Output itself."]}),Object(l.jsx)(S.a,{language:"typescript",theme:_.a,customStyle:{fontSize:"1.35rem"},children:"const spy = spyOn(component.onAdvisorChanged, 'emit');"})]}),Object(l.jsx)(E,{title:"APIs...\ud83d\udcde",subtext:"Testing data from an outside source",notes:""}),Object(l.jsx)(E,{title:"Testing HTTP Calls",children:Object(l.jsx)("p",{children:"It's important to test that HTTP calls are made when you call services."})}),Object(l.jsxs)(E,{animate:!1,title:"Testing HTTP Calls",children:[Object(l.jsx)("p",{children:"It's important to test that HTTP calls are made when you call services."}),Object(l.jsx)("p",{children:"It allows you to make sure that calls are not broken by refactoring."})]}),Object(l.jsx)(T,{tertiary:!0,title:"Example",children:Object(l.jsx)("img",{style:{height:"300px"},src:"https://media.giphy.com/media/g7SFZQGzS4HwQ/giphy.gif?cid=ecf05e476vafhdtttonfp41b7n3txl35cxh4hdn2i7ucje0w&rid=giphy.gif&ct=g"})}),Object(l.jsx)(E,{title:"Let's say you have...",children:Object(l.jsx)(S.a,{language:"typescript",theme:_.a,customStyle:{fontSize:"1.35rem"},children:"getAdvisors() {\n  return this.http.get<IAdvisor>('/api/advisors');\n}"})}),Object(l.jsxs)(E,{animate:!1,title:"Let's say you have...",children:[Object(l.jsx)(S.a,{language:"typescript",theme:_.a,customStyle:{fontSize:"1.35rem"},children:"getAdvisors() {\n  return this.http.get<IAdvisor>('/api/advisors');\n}"}),Object(l.jsx)("p",{style:{display:"block"},children:"How do you test that?"})]}),Object(l.jsx)(E,{title:"The test",children:Object(l.jsx)(S.a,{language:"typescript",theme:_.a,customStyle:{fontSize:"1.35rem"},children:"beforeEach(() => {\n  // Add HttpClientTestingModule to catch API calls.\n  TestBed.configureTestingModule({\n    imports: [HttpClientTestingModule]\n  });\n});\n    \nit('should call /api/advisors when getAdvisors() is called', (done) => {\n  // Subscribe to the service method and call done when it's completed\n  // since it is asynchronous.\n  servce.getAdvisors().subscribe(() => done());\n\n  // Pull the HTTP client from the testbed.\n  const httpClientTesting = TestBed.inject(HttpTestingController);\n  const req = httpClientTesting.expectOne({\n    method: 'GET', url: '/api/advisors'\n  });\n\n  const mockAdvisor = { name: 'John Smith', id: 112233 };\n  // Flush the request to make it return the data, calling the subscription above.\n  req.flush([mockAdvisor])\n})"})}),Object(l.jsx)(E,{title:"Tips \ud83d\udcdd",notes:"",children:Object(l.jsxs)("ul",{children:[Object(l.jsx)("li",{className:k.a["with-bullet"],children:"Write your tests along with your code"}),Object(l.jsx)("li",{className:k.a["with-bullet"],children:'When testing multiple cases, use forEach and pass data into the "it"'}),Object(l.jsx)("li",{className:k.a["with-bullet"],children:"Always try to write your code from the template"}),Object(l.jsxs)("li",{className:k.a["with-bullet"],children:['When in doubt, "console.log" ',Object(l.jsx)("strong",{children:"everything"})]})]})}),Object(l.jsx)(E,{title:"Common Pitfalls",notes:"",children:Object(l.jsxs)("ul",{children:[Object(l.jsx)("li",{className:k.a["with-bullet"],children:"Your code just isn't written in a way that can be tested easily"}),Object(l.jsx)("li",{className:k.a["with-bullet"],children:"Writing too close to the implementation (aka private methods..) and having to constantly rewrite tests"}),Object(l.jsx)("li",{className:k.a["with-bullet"],children:"Not adding IDs on elements that are hard to get"}),Object(l.jsx)("li",{className:k.a["with-bullet"],children:"Not adding components to the TestBed, resulting in them being unreachable"})]})})];return Object(l.jsx)("div",{children:Object(l.jsx)(v,{title:q,theme:k.a,slides:e,showNavigation:!0})})};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(Object(l.jsx)(P,{}),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))}},[[254,1,2]]]);
//# sourceMappingURL=main.4be0e5a0.chunk.js.map