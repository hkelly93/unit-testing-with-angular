{"version":3,"sources":["theme.module.scss","utils/route.tsx","effects/useKeyDown.ts","context/ThemeContext.ts","components/ProgressBar.tsx","components/Navigation.tsx","components/SlideDeck.tsx","effects/useSetTitle.ts","effects/useSetHistory.ts","effects/useClick.ts","utils/progress.ts","components/TitleSlide.tsx","components/Slide.tsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ROUTES","buildPath","index","buildRoutes","components","length","map","component","path","exact","goForwardsKeys","goBackwardsKeys","ThemeContext","createContext","ThemeProvider","Provider","ThemeConsumer","Consumer","ProgressBar","progress","theme","style","width","className","Navigation","forwards","backwards","navigation","onClick","history","createHashHistory","SlideDeck","title","slides","showNavigation","currentSlide","location","pathname","replace","useState","Number","slide","setSlide","useEffect","document","useSetTitle","push","useSetHistory","useEventListener","event","keyCode","includes","useKeyDown","useClick","value","TitleSlide","subtitle","children","secondary","tertiary","hasSeenFirstNote","Slide","subtext","footer","animate","notes","showNotes","setShowNotes","isN","getNoteIcon","classnames","App","src","alt","height","paddingTop","textAlign","backgroundColor","padding","border","fontSize","color","language","docco","customStyle","display","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.035e67a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"slide-deck\":\"theme_slide-deck__30IhV\",\"progress-bar\":\"theme_progress-bar__1o0no\",\"title-slide\":\"theme_title-slide___cgBD\",\"title-slide-secondary\":\"theme_title-slide-secondary__45-qQ\",\"title-slide-tertiary\":\"theme_title-slide-tertiary__1v3wl\",\"fadeIn\":\"theme_fadeIn__2i99R\",\"slide\":\"theme_slide__qvjHA\",\"column\":\"theme_column__1YpiC\",\"subtext\":\"theme_subtext__3t1ra\",\"with-bullet\":\"theme_with-bullet__1OtWi\",\"inline\":\"theme_inline__5lyD8\",\"animate\":\"theme_animate__2U69e\",\"navigation\":\"theme_navigation__22ewX\",\"left-arrow\":\"theme_left-arrow__1PQ8X\",\"right-arrow\":\"theme_right-arrow__3ovVQ\",\"bold\":\"theme_bold__sAbIh\",\"subtitle\":\"theme_subtitle__1R7X0\",\"notes\":\"theme_notes___SI1y\",\"has-notes\":\"theme_has-notes__F6YLQ\"};","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\n\nlet ROUTES: Array<JSX.Element> = [];\n\nexport const buildPath = (index: number): string =>\n  `/${index === 0 ? '' : index}`;\n\nconst buildRoutes = (components: Array<any>) => {\n  if (ROUTES.length) return ROUTES;\n\n  ROUTES = components.map((component, index) => {\n    const path = buildPath(index);\n\n    // @ts-ignore\n    return <Route key={path} path={path} component={() => component} exact />;\n  });\n\n  return ROUTES;\n};\n\nexport const configureRouter = (history: any, components: Array<any>) => (\n  <Router history={history}>\n    <Switch>{buildRoutes(components)}</Switch>\n  </Router>\n);\n","import useEventListener from '@use-it/event-listener';\n\n// Keycode mappings.\nconst SPACE = 32;\nconst ENTER = 13;\nconst ARROW_LEFT = 37;\nconst ARROW_RIGHT = 39;\nconst ARROW_UP = 38;\nconst ARROW_DOWN = 40;\n\nconst goForwardsKeys = [SPACE, ENTER, ARROW_RIGHT, ARROW_DOWN];\nconst goBackwardsKeys = [ARROW_LEFT, ARROW_UP];\n\nexport default (forwards: () => void, backwards: () => void) => {\n  useEventListener('keydown', (event: any) => {\n    const { keyCode } = event;\n\n    if (goForwardsKeys.includes(keyCode)) forwards();\n    if (goBackwardsKeys.includes(keyCode)) backwards();\n  });\n};\n","import { createContext } from 'react';\n\nconst ThemeContext = createContext({});\n\nexport const ThemeProvider = ThemeContext.Provider;\nexport const ThemeConsumer = ThemeContext.Consumer;\nexport default ThemeContext;\n","import React from 'react';\n\nimport { ThemeConsumer } from '../context/ThemeContext';\n\nconst ProgressBar = ({ progress }: { progress: number }) => {\n  return (\n    <ThemeConsumer>\n      {(theme: any) => (\n        <div\n          style={{ width: `${progress}%` }}\n          className={theme['progress-bar']}\n        />\n      )}\n    </ThemeConsumer>\n  );\n};\n\nexport default ProgressBar;\n","import React from 'react';\n\nimport { ThemeConsumer } from '../context/ThemeContext';\n\ntype Props = {\n  forwards: () => void;\n  backwards: () => void;\n};\n\nconst Navigation = ({ forwards, backwards }: Props) => (\n  <ThemeConsumer>\n    {(theme: any) => (\n      <div className={theme.navigation}>\n        <button onClick={backwards} className={theme['left-arrow']}>\n          {'<'}\n        </button>\n        <button onClick={forwards} className={theme['right-arrow']}>\n          {'>'}\n        </button>\n      </div>\n    )}\n  </ThemeConsumer>\n);\n\nexport default Navigation;\n","import React, { useState } from 'react';\nimport { createHashHistory } from 'history';\n\nimport useSetTitle from '../effects/useSetTitle';\nimport useSetHistory from '../effects/useSetHistory';\nimport useKeyDown from '../effects/useKeyDown';\nimport useClick from '../effects/useClick';\n\nimport ProgressBar from './ProgressBar';\nimport Slide from './Slide';\nimport Navigation from './Navigation';\n\nimport { ThemeProvider } from '../context/ThemeContext';\n\nimport { configureRouter } from '../utils/route';\nimport { calculateProgress } from '../utils/progress';\n\nconst history = createHashHistory();\n\ntype Props = {\n  title: string;\n  theme: any;\n  slides: Array<typeof Slide>;\n  showNavigation: boolean;\n};\n\nexport const SlideDeck = ({ title, theme, slides, showNavigation }: Props) => {\n  const currentSlide = history.location.pathname.replace('/', '') || 0;\n\n  const [slide, setSlide] = useState(Number(currentSlide));\n  const forwards = () => setSlide(slide + 1);\n  const backwards = () => setSlide(slide - 1);\n\n  useSetTitle(title);\n  useSetHistory(history, slide);\n  useKeyDown(forwards, backwards);\n  useClick(forwards);\n\n  const progress = calculateProgress(slide, slides);\n\n  return (\n    <div className={theme['slide-deck']}>\n      <ThemeProvider value={theme}>\n        {showNavigation && (\n          <Navigation forwards={forwards} backwards={backwards} />\n        )}\n\n        {configureRouter(history, slides)}\n\n        <ProgressBar progress={progress} />\n      </ThemeProvider>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\n\n/**\n * Sets the document title to the `title` prop passed in.\n */\nexport default (title: string) => {\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n};\n","import { useEffect } from 'react';\n\nimport { buildPath } from '../utils/route';\n/**\n * Sets the hash based on the slide number.\n */\nexport default (history: any, slide: number) => {\n  useEffect(() => {\n    history.push(buildPath(slide));\n  }, [history, slide]);\n};\n","import useEventListener from '@use-it/event-listener';\n\nexport default (forwards: () => void) => {\n  useEventListener('onclick', (event) => {\n    forwards();\n  });\n};\n","export const calculateProgress = (\n  activeSlide: number,\n  totalSlides: Array<any>\n) => (activeSlide / totalSlides.length) * 100;\n","import React from 'react';\n\nimport { ThemeConsumer } from '../context/ThemeContext';\n\ntype Props = {\n  title: React.Component | string;\n  subtitle?: React.Component | string;\n  children?: any;\n  secondary?: boolean;\n  tertiary?: boolean;\n};\n\nconst TitleSlide = ({\n  title,\n  subtitle,\n  children,\n  secondary,\n  tertiary,\n}: Props) => (\n  <ThemeConsumer>\n    {(theme: any) => {\n      let className = theme['title-slide'];\n\n      if (secondary) className = theme['title-slide-secondary'];\n\n      if (tertiary) className = theme['title-slide-tertiary'];\n\n      return (\n        <div className={className}>\n          {children}\n          <h1>{title}</h1>\n          {subtitle && <h2>{subtitle}</h2>}\n        </div>\n      );\n    }}\n  </ThemeConsumer>\n);\n\nexport default TitleSlide;\n","import React, { useState } from 'react';\nimport classnames from 'classnames';\nimport { ThemeConsumer } from '../context/ThemeContext';\nimport useEventListener from '@use-it/event-listener';\n\ntype Props = {\n  title?: string;\n  subtext?: React.Component | string;\n  children: React.Component | string;\n  footer?: React.Component | string;\n  animate?: boolean;\n  notes?: string;\n};\n\nlet hasSeenFirstNote = false;\n\nconst Slide = ({\n  title,\n  subtext,\n  children,\n  footer,\n  animate = true,\n  notes = '',\n}: Props) => {\n  const [showNotes, setShowNotes] = useState(false);\n\n  useEventListener('keydown', (event: any) => {\n    const { keyCode } = event;\n    const isN = keyCode === 78;\n\n    if (notes) setShowNotes(showNotes && isN ? false : true);\n\n    if (isN) {\n      hasSeenFirstNote = true;\n    }\n  });\n\n  const getNoteIcon = (theme: any) => (\n    <div className={theme['has-notes']}>\n      📣 {!hasSeenFirstNote && <span>Press n for notes</span>}\n    </div>\n  );\n\n  return (\n    <ThemeConsumer>\n      {(theme: any) => (\n        <div className={classnames(theme.slide, { [theme.animate]: animate })}>\n          {title && <h1>{title}</h1>}\n\n          {subtext && <div className={theme.subtext}>{subtext}</div>}\n\n          {children}\n\n          {footer ? footer : null}\n\n          {showNotes && <div className={theme.notes}>{notes}</div>}\n\n          {notes && getNoteIcon(theme)}\n        </div>\n      )}\n    </ThemeConsumer>\n  );\n};\n\nexport default Slide;\n","import React from 'react';\nimport { SlideDeck } from './components/SlideDeck';\nimport theme from './theme.module.scss';\n\n// TODO: Move out to code slide\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nimport TitleSlide from './components/TitleSlide';\nimport Slide from './components/Slide';\n\nconst title = 'Unit Testing with Angular';\n\nfunction App() {\n  const slides = [\n    /**\n     * INTRODUCTION\n     */\n    <TitleSlide title={title} subtitle=\"Harrison Kelly 10/27/2021\" />,\n\n    /**\n     * WHAT ARE UNIT TESTS?\n     */\n    <TitleSlide title=\"what are they?\" secondary>\n      <img\n        src=\"https://media.giphy.com/media/V4uGHRgz0zi6Y/source.gif\"\n        alt=\"\"\n        style={{ height: '400px', paddingTop: '50px' }}\n      />\n    </TitleSlide>,\n\n    <Slide\n      title=\"Power 🔨\"\n      subtext=\"Use them to be able to\"\n      notes=\"Unit tests enable developers to prevent regressions by having simple to write and quick to run test cases to make sure that their code is running properly. This allows for code to safely be refactored\n      without having to worry that someone else is using the same code and you now broke their application (assuming that code has good unit testing). It is also a way to document how a function should work and what\n      the expected outputs are.\"\n    >\n      <ul>\n        <li className={theme['with-bullet']}>\n          Prevent regressions during refactoring\n        </li>\n        <li className={theme['with-bullet']}>\n          Additional form of finishing a feature\n        </li>\n        <li className={theme['with-bullet']}>Document code</li>\n      </ul>\n    </Slide>,\n\n    <TitleSlide secondary title=\"What should be tested 🤨\"></TitleSlide>,\n\n    <Slide title=\"EVERYTHING\">\n      <img\n        style={{ height: '400px' }}\n        src=\"https://media.giphy.com/media/1FR40e3b76Jnq/giphy.gif?cid=ecf05e47d4abi9ebzluxutk4urjd734wkdd9aqsmeai3mivz&rid=giphy.gif&ct=g\"\n      />\n    </Slide>,\n\n    <Slide title=\"Joking...\"></Slide>,\n\n    <Slide title=\"Sort of...\">\n      <p>\n        Unit tests should cover everything that is testable. Think of it as a\n        way to write rules your code has to follow.\n      </p>\n    </Slide>,\n\n    <Slide title=\"⚠ Scope!\">\n      <img src=\"https://media.giphy.com/media/2tKbtEbIEsT6NpvoUw/giphy.gif\" style={{height: '300px'}}></img>\n    </Slide>,\n\n    <Slide animate={false} title=\"⚠ Scope!\">\n      <p>Unit tests should <strong>ONLY</strong> test one \"unit\". Unit tests for a component shouldn't make sure that a service is making the correct API call(s).</p>\n      <p>You need to test that the service is called, but not what the service's method is doing.</p>\n    </Slide>,\n\n    <Slide title=\"But no one likes unit testing...\">\n      <img\n        style={{ height: '300px' }}\n        src=\"https://media.giphy.com/media/Js1qlQiDvj9ubktynP/giphy.gif\"\n      ></img>\n    </Slide>,\n\n    <Slide title=\"I know\" notes=\"Unit tests give developers a quick way to know if their changes broke something. With good coverage, you can safely know that your\n    changes did not break other areas of the app. There are some holes though and they shouldn't be used without actual browser/QA testing.\">\n      <p>\n        But if we want to have a stable code base and not be up late at night\n        fixing critical bugs 😴...\n      </p>\n    </Slide>,\n\n    <TitleSlide tertiary title=\"You have to write them\"></TitleSlide>,\n\n    <TitleSlide tertiary title=\"Okay...but how do I write one? 🤔\" />,\n\n    /**\n     * WHERE SHOULD UNIT TESTS BE?\n     */\n    <TitleSlide secondary title=\"Where to test\"></TitleSlide>,\n\n    <Slide notes=\"Testing the implementation directly leads to tests that break because code behind the scenes changed. This is a bad practice, especially when the\n    code didn't change how the component functions.\">\n      <p>You want to test your code at the point furthest from the implementation.</p>\n    </Slide>,\n\n    <Slide animate={false} notes=\"Testing the implementation directly leads to tests that break because code behind the scenes changed. This is a bad practice, especially when the\n    code didn't change how the component functions.\">\n      <p>You want to test your code at the point furthest from the implementation.</p>\n      <p style={{textAlign: 'left'}}>This is usually through the template/view layer.</p>\n    </Slide>,\n\n    <Slide animate={false} notes=\"Testing the implementation directly leads to tests that break because code behind the scenes changed. This is a bad practice, especially when the\n    code didn't change how the component functions.\">\n    <p>You want to test your code at the point furthest from the implementation.</p>\n    <p>This is usually through the template/view layer.</p>\n    <p>This layer is the least connected to the implementation and won't break if the component changes (usually 😀).</p>\n    </Slide>,\n\n    <TitleSlide tertiary title=\"Example\">\n      <img style={{height: '300px'}} src=\"https://media.giphy.com/media/g7SFZQGzS4HwQ/giphy.gif?cid=ecf05e476vafhdtttonfp41b7n3txl35cxh4hdn2i7ucje0w&rid=giphy.gif&ct=g\"></img>\n    </TitleSlide>,\n\n    <Slide>\n      <p>Let's say you have a component that finds all of the advisors for a specific household.</p>\n    </Slide>,\n\n    <Slide animate={false} notes=\"This is a classic example where the name of the household and the advisors are retrieved from API calls, formatted, and displayed\n    in the front end.\">\n      <p>Let's say you have a component that finds all of the advisors for a specific household.</p>\n\n      <div style={{backgroundColor: '#eee', padding: '10px', border: '1px solid #ddd'}}>\n        <div style={{fontSize: '14pt'}}>Advisors in Household <strong>PEEKE HOUSE</strong></div>\n        <ul>\n          <li className={theme['with-bullet']}>Laura Peeke</li>\n          <li className={theme['with-bullet']}>Joe Peeke</li>\n          <li className={theme['with-bullet']}>Sam Peeke Jr.</li>\n        </ul>\n      </div>\n    </Slide>,\n\n    <Slide>\n      <p>This would require the following unit tests</p>\n    </Slide>,\n\n    <Slide animate={false} notes=\"Testing this would require tests to be written that make sure that the correct household and advisors are displayed.\">\n      <p>This would require the following unit tests</p>\n\n      <div style={{width: '75%', fontSize: '20pt', textAlign: 'center', color: '#666'}}>\n        <pre>Should display the correct household name</pre>\n        <pre>Should display the correct advisors in the household</pre>\n      </div>\n    </Slide>,\n\n    <Slide title=\"These tests would look like\" notes=\"In the first test, we start off by calling detectChanges() to make sure that the component is initialized. After\n    that, fixture.nativeElement.querySelector is used to pull the household name (using the ID we set) from the DOM. The textContent method allows us to check what\n    text the selector contains. In this example, we're able to verify that it's set to the correct household name. Testing this way allows us to not have to rewrite the\n    unit test if the implementation changes.\">\n\n      <SyntaxHighlighter\n        language=\"typescript\"\n        theme={docco}\n        customStyle={{ fontSize: '1.35rem' }}\n      >\n        {`it('should display the correct household name', () => {\n  fixture.detectChanges(); // Call ngOnInit.\n  const householdName = fixture.nativeElement.querySelector('#household-name');\n  expect(householdName.textContent()).toEqual('PEEKE HOUSE');\n}`}\n      </SyntaxHighlighter>\n\n      <SyntaxHighlighter\n        language=\"typescript\"\n        theme={docco}\n        customStyle={{ fontSize: '1.35rem' }}\n      >\n        {`it('should display the correct advisors', () => {\n  fixture.detectChanges(); // Call ngOnInit.\n  const advisorsList = fixture.nativeElement.querySelector('#advisors-list');\n  expect(advisorsList.textContent()).toEqual('Laura Peeke Joe Peeke Sam Peeke Jr.');\n}`}\n      </SyntaxHighlighter>\n    </Slide>,\n\n    <Slide title=\"✋ WAIT\" notes=\"Writing tests that look at implementation details isn't always avoidable. There can be a case where you want to test this public method\n    directly, which is perfectly fine. It makes the unit test slightly more fragile, but if your code is functional, it isn't an issue. If all of your tests test the\n    implementation directly, you can run into cases where you have to rewrite tests often, or the component is broken in the template, but that part isn't tested.\">\n      <p>It's important to note that we aren't looking at properties in the component.</p>\n    </Slide>,\n\n    <Slide title=\"✋ WAIT\" animate={false} notes=\"Writing tests that look at implementation details isn't always avoidable. There can be a case where you want to test this public method\n    directly, which is perfectly fine. It makes the unit test slightly more fragile, but if your code is functional, it isn't an issue. If all of your tests test the\n    implementation directly, you can run into cases where you have to rewrite tests often, or the component is broken in the template, but that part isn't tested.\">\n      <p>It's important to note that we aren't looking at properties in the component.</p>\n\n      <p>You could rewrite these tests to tie them to the implementation...</p>\n    </Slide>,\n\n  <Slide title=\"🙅‍♂️ BAD TESTS\" notes=\"These tests are bad because they're testing the component directly, when it's just as easy to test the template. This can lead to thinking\n  your refactoring is covered by tests, but it isn't. The template could be broken here and the tests wouldn't show it. The second example is checking that the array is correct, but\n  isn't testing that they're passed into the list or anything correctly.\">\n\n  <SyntaxHighlighter\n    language=\"typescript\"\n    theme={docco}\n    customStyle={{ fontSize: '1.35rem' }}\n  >\n    {`it('should display the correct household name', () => {\n    fixture.detectChanges(); // Call ngOnInit.\n    const { householdName } = component;\n    expect(householdName).toEqual('peeke household');\n  }`}\n  </SyntaxHighlighter>\n\n  <SyntaxHighlighter\n    language=\"typescript\"\n    theme={docco}\n    customStyle={{ fontSize: '1.35rem' }}\n  >\n    {`it('should display the correct advisors', () => {\n    fixture.detectChanges(); // Call ngOnInit.\n    const { advisorsList } = component;\n    expect(advisorsList).toEqual([\n      'Laura Peeke',\n      'Joe Peeke',\n      'Sam Peeke Jr.');\n  }`}\n  </SyntaxHighlighter>\n  </Slide>,\n\n  <Slide title=\"😔\">\n    <p>These are bad tests for multiple reasons</p>\n  </Slide>,\n\n  <Slide title=\"😔\" animate={false}>\n    <p>These are bad tests for multiple reasons</p>\n\n    <p>If the component changes how it retrieves/stores the data, the tests could need to be rewritten.</p>\n  </Slide>,\n\n    <TitleSlide secondary title=\"The Basics\">\n      <img src=\"https://media.giphy.com/media/de4QmZqpcqQMOPL2Mt/giphy.gif\" alt=\"Building Blocks\" />\n    </TitleSlide>,\n\n    <Slide\n      title=\"detect Changes\"\n      notes=\"Calling fixture.detectChanges() is how you initialize your component for the first time. It is considered an anti-pattern to call 'component.ngOnInit', since Angular itself\n  is responsible for calling that. If you need to call ngOnInit explicitly, you should look into how your test is structured and think about setup before the fixture detectChanges call. Make sure to call detectChanges\n  every time you need the view to be updated.\"\n    >\n      <p className={theme.subtitle}>Use it as a way to update your view.</p>\n      <div style={{ textAlign: 'center' }}>\n        <div>\n          ⛔ Do <strong>NOT</strong> call{' '}\n          <pre className=\"code\" style={{ display: 'inline-block' }}>\n            ngOnInit()\n          </pre>{' '}\n          directly for this.\n        </div>\n        <div>✅ Do call it before checking the view for changes</div>\n      </div>\n    </Slide>,\n\n    <Slide title=\"Example\" notes=\"In this example, we're calling detectChanges() to make sure that the component is initialized before interacting with it. After the component\n    is initialized, we can flip the shouldShowButton flag to true, and then have the view detect the changes again. The second call to detectChanges() updates the view with\n    the changes we made to the component. This is needed, or else we won't be able to test the changes.\">\n      <SyntaxHighlighter\n        language=\"typescript\"\n        theme={docco}\n        customStyle={{ fontSize: '1.35rem' }}\n      >\n        {`it('should show the button', () => {\n  fixture.detectChanges(); // Call ngOnInit.\n  component.shouldShowButton = true;\n\n  fixture.detectChanges(); // Update the view.\n  const button = fixture.nativeElement.querySelector('#my-button');\n  expect(button).toBeTruthy(); // Assert the button is in the DOM.\n})`}\n      </SyntaxHighlighter>\n    </Slide>,\n\n    <Slide animate={false} title=\"Example\">\n      <SyntaxHighlighter\n        language=\"typescript\"\n        theme={docco}\n        customStyle={{ fontSize: '1.35rem' }}\n      >\n        {`it('should show the button', () => {\n  fixture.detectChanges(); // Call ngOnInit.\n  component.shouldShowButton = true;\n\n  fixture.detectChanges(); // Update the view.\n  const button = fixture.nativeElement.querySelector('#my-button');\n  expect(button).toBeTruthy(); // Assert the button is in the DOM.\n})`}\n      </SyntaxHighlighter>\n\n      <p>\n        Updating the component's shouldShowButton property updates the view.\n      </p>\n    </Slide>,\n\n\n  <Slide title=\"Querying...🔍\" notes=\"Querying allows you to interact with the DOM/template and check against what the user would see if they were running the app. This is extremely powerful because it enables you to interact with elements on the page, just as a user would, without the need to write end to end tests.\">\n    <p>\n      Use querying as a way to interact with the template and retreive data.\n    </p>\n  </Slide>,\n\n  <Slide animate={false} title=\"Querying...🔍\" notes=\"Querying allows you to interact with the DOM/template and check against what the user would see if they were running the app. This is extremely powerful because it enables you to interact with elements on the page, just as a user would, without the need to write end to end tests.\">\n    <p>\n      Use querying as a way to interact with the template and retreive data.\n    </p>\n    <p>\n      You can think of this as document.querySelector and document.querySelectorAll.\n    </p>\n  </Slide>,\n\n  <Slide title=\"Querying...🔍\" notes=\"\">\n    <p>\n      This is exposed on the fixture in the test under fixture.nativeElement.\n    </p>\n  </Slide>,\n\n  <Slide animate={false} title=\"Querying...🔍\" notes=\"\">\n    <p>\n      This is exposed on the fixture in the test under fixture.nativeElement.\n    </p>\n    <p>\n      It can be called with fixture.nativeElement.querySelector and fixture.nativeElement.querySelectorAll.\n    </p>\n  </Slide>,\n\n  <Slide title=\"Clicking\" notes=\"\">\n    <p>You can use the return value of a query to click and interact with the DOM.</p>\n  </Slide>,\n\n  <Slide animate={false} title=\"Clicking\" notes=\"\">\n    <p>You can use the return value of a query to click and interact with the DOM.</p>\n\n    <SyntaxHighlighter\n        language=\"typescript\"\n        theme={docco}\n        customStyle={{ fontSize: '1.35rem' }}\n      >\n        {`const button = fixture.nativeElement.querySelector('#my-button');\nbutton.click();`}\n      </SyntaxHighlighter>\n  </Slide>,\n\n  <Slide title=\"Services...🍽\" notes=\"\">How to test them...</Slide>,\n\n  <Slide title=\"Getting data\">\n    <p>Most data is retrieved through a service, with Subscriptions.</p>\n  </Slide>,\n\n  <Slide animate={false} title=\"Getting data\">\n    <p>Most data is retrieved through a service, with Subscriptions.</p>\n\n    <SyntaxHighlighter\n        language=\"typescript\"\n        theme={docco}\n        customStyle={{ fontSize: '1.35rem' }}\n      >\n        {`this.subscriptions.push(\n  this.advisorService.getAdvisors().subscribe(advisors => {\n    this.advisors = advisors;\n  });\n);`}\n      </SyntaxHighlighter>\n  </Slide>,\n\n  <TitleSlide secondary title=\"How to test that? 🤔\"></TitleSlide>,\n\n  <Slide title=\"Using spies!\"></Slide>,\n\n  <Slide animate={false} title=\"Using spies!\">\n    <p>\n      Spies allow you to mock the data that the service is going to return...let's look at an example...\n    </p>\n  </Slide>,\n\n  <Slide animate={false} title=\"Using Spies!\" notes=\"In this example, we're getting the version of the service that is injected into the component by using TestBed.inject. This\n  lets us interact with the service, allowing us to use spies to add in mock Data. The spyOn call is basically telling the test to change the return it's return value and\n  return our mock data. This allows us to setup different test cases with different data, and fully test every part of the component.\">\n<SyntaxHighlighter\n        language=\"typescript\"\n        theme={docco}\n        customStyle={{ fontSize: '1.35rem' }}\n      >\n        {`it('should show the count of advisors correctly', () => {\n  // Grab the service from the test bed.\n  const advisorService = TestBed.inject(AdvisorService);\n\n  // Spy on the getAdvisors method to return an Observable with \"fakeAdvisors\".\n  spyOn(advisorService, 'getAdvisors').and.returnValue(of(fakeAdvisors));\n\n  // Call ngOnInit.\n  fixture.detectChanges();\n\n  const advisorCount = fixture.nativeElement.querySelector('#advisor-count')\n  expect(advisorCount.textContent).toEqual(3);\n})`}\n      </SyntaxHighlighter>\n  </Slide>,\n\n  <Slide animate={false} title=\"Using Spies!\" subtext=\"in your tests allows you to..\">\n    <ul>\n      <li className={theme['with-bullet']}>Mock data</li>\n      <li className={theme['with-bullet']}>Create test scenarios</li>\n      <li className={theme['with-bullet']}>Test methods are called</li>\n      <li className={theme['with-bullet']}>Limit testing to the scope of the suite</li>\n    </ul>\n  </Slide>,\n\n    \n  <Slide title=\"More Spies...🕵️‍♀️\" notes=\"\"></Slide>,\n\n  <Slide animate={false} title=\"More Spies...🕵️‍♀️\" notes=\"\">\n    <p>Spies allow you to setup the component with whatever data you want.</p>\n  </Slide>,\n\n  <Slide animate={false} title=\"More Spies...🕵️‍♀️\" notes=\"\">\n    <p>Spies allow you to setup the component with whatever data you want.</p>\n    <p>This can be API data, Inputs, or even data entered into a form.</p>\n  </Slide>,\n\n  <Slide tertiary title=\"Lets look at more examples\"></Slide>,\n\n  <Slide title=\"Outputs\">\n    <p>Let's say you want to see if an Output emitted the correct value.</p>\n  </Slide>,\n\n  <Slide animate={false} title=\"Outputs\">\n    <p>Let's say you want to see if an Output emitted the correct value.</p>\n    <p>You could do that with the following test...</p>\n  </Slide>,\n\n  <Slide animate={false} title=\"Outputs\">\n    <SyntaxHighlighter\n        language=\"typescript\"\n        theme={docco}\n        customStyle={{ fontSize: '1.35rem' }}\n      >\n        {`it('should emit the change to the parent component', () => {\n  // Create the spy.\n  const spy = spyOn(component.onAdvisorChanged, 'emit');\n\n  // Get the checkbox.\n  const advisorId = '112233';\n  const checkboxId = '#advisor-checkbox-' + advisorId;\n  const advisorCheckbox = fixture.nativeElement.querySelector(checkboxId);\n\n  // Click the checkbox.\n  advisorCheckbox.click();\n\n  // Assert.\n  expect(spy).toHaveBeenCalledWith(advisorId);\n})`}\n      </SyntaxHighlighter>\n  </Slide>,\n\n  <Slide title=\"⚠ Notice!\">\n    <p>Here we spied on the \"emit\" method <strong>inside</strong> of the Output, not the Output itself.</p>\n\n    <SyntaxHighlighter\n        language=\"typescript\"\n        theme={docco}\n        customStyle={{ fontSize: '1.35rem' }}\n      >\n        {`const spy = spyOn(component.onAdvisorChanged, 'emit');`}\n      </SyntaxHighlighter>\n  </Slide>,\n\n  <Slide title=\"APIs...📞\" subtext=\"Testing data from an outside source\" notes=\"\"></Slide>,\n\n  <Slide title=\"Testing HTTP Calls\">\n    <p>It's important to test that HTTP calls are made when you call services.</p>\n  </Slide>,\n\n  <Slide animate={false} title=\"Testing HTTP Calls\">\n    <p>It's important to test that HTTP calls are made when you call services.</p>\n    <p>It allows you to make sure that calls are not broken by refactoring.</p>\n  </Slide>,\n\n  <TitleSlide tertiary title=\"Example\">\n    <img style={{height: '300px'}} src=\"https://media.giphy.com/media/g7SFZQGzS4HwQ/giphy.gif?cid=ecf05e476vafhdtttonfp41b7n3txl35cxh4hdn2i7ucje0w&rid=giphy.gif&ct=g\"></img>\n  </TitleSlide>,\n\n  <Slide title=\"Let's say you have...\">\n    <SyntaxHighlighter\n        language=\"typescript\"\n        theme={docco}\n        customStyle={{ fontSize: '1.35rem' }}\n      >\n        {`getAdvisors() {\n  return this.http.get<IAdvisor>('/api/advisors');\n}`}\n      </SyntaxHighlighter>\n  </Slide>,\n\n  <Slide animate={false} title=\"Let's say you have...\">\n    <SyntaxHighlighter\n        language=\"typescript\"\n        theme={docco}\n        customStyle={{ fontSize: '1.35rem' }}\n      >\n        {`getAdvisors() {\n  return this.http.get<IAdvisor>('/api/advisors');\n}`}\n      </SyntaxHighlighter>\n    <p style={{display: 'block'}}>How do you test that?</p>\n  </Slide>,\n\n<Slide title=\"The test\">\n  <SyntaxHighlighter\n      language=\"typescript\"\n      theme={docco}\n      customStyle={{ fontSize: '1rem' }}\n    >\n      {`beforeEach(() => {\n  // Add HttpClientTestingModule to catch API calls.\n  TestBed.configureTestingModule({\n    imports: [HttpClientTestingModule]\n  });\n});\n    \nit('should call /api/advisors when getAdvisors() is called', (done) => {\n  // Subscribe to the service method and call done when it's completed\n  // since it is asynchronous.\n  servce.getAdvisors().subscribe(() => done());\n\n  // Pull the HTTP client from the testbed.\n  const httpClientTesting = TestBed.inject(HttpTestingController);\n  const req = httpClientTesting.expectOne({\n    method: 'GET', url: '/api/advisors'\n  });\n\n  const mockAdvisor = { name: 'John Smith', id: 112233 };\n  // Flush the request to make it return the data, calling the subscription above.\n  req.flush([mockAdvisor])\n})`}\n  </SyntaxHighlighter>\n</Slide>,\n\n  <Slide title=\"Tips 📝\" notes=\"\">\n    <ul>\n        <li className={theme['with-bullet']}>\n          Write your tests along with your code\n        </li>\n        <li className={theme['with-bullet']}>\n          When testing multiple cases, use forEach and pass data into the \"it\"\n        </li>\n        <li className={theme['with-bullet']}>Always test from the template</li>\n        <li className={theme['with-bullet']}>When in doubt, \"console.log\" <strong>everything</strong></li>\n      </ul>\n  </Slide>,\n\n  <Slide title=\"Common Pitfalls\" notes=\"\">\n    <ul>\n      <li className={theme['with-bullet']}>Your code just isn't written in a way that can be tested easily</li>\n      <li className={theme['with-bullet']}>Writing too close to the implementation and having to constantly rewrite tests</li>\n      <li className={theme['with-bullet']}>Not adding IDs on elements that are hard to get</li>\n      <li className={theme['with-bullet']}>Not adding components to the TestBed, resulting in them being unreachable</li>\n    </ul>\n  </Slide>,\n\n  <TitleSlide title=\"Questions?\"></TitleSlide>\n  ];\n\n  return (\n    <div>\n      <SlideDeck title={title} theme={theme} slides={slides} showNavigation />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}